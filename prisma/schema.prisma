// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  USER
  DRIVER
}

model User {
  id          String     @id
  username    String     @unique
  email       String     @unique
  password    String
  name        String
  lastname    String
  phoneNumber String     @unique
  idCard      String     @unique
  userType    UserType
  driverId    String?    @unique
  sessions    Session[]
  Driver      Driver?    @relation(fields: [driverId], references: [id], onDelete: Cascade)
  Feedback    Feedback[]
  Booking     Booking[]
}

model Driver {
  id            String         @id @default(cuid())
  User          User?
  license       DrivingLicense @relation(fields: [licenseNumber], references: [licenseId], onDelete: Cascade)
  licenseNumber String         @unique
  Car           Car[]
  trips         Trip[]
}

model DrivingLicense {
  licenseId  String   @id
  expiration DateTime
  Driver     Driver?
}

model Car {
  licensePlate String @id
  model        String
  Driver       Driver @relation(fields: [driverId], references: [id])
  driverId     String 
  Trip         Trip[]
}

model Trip {
  id              String  @id @default(cuid())
  departureCity   String
  destinationCity String
  departureDate   String
  departureHour   String
  price           Decimal
  estimatedTime   String
  driverId        String
  Driver          Driver? @relation(fields: [driverId], references: [id])
  Booking         Booking[]
  carlicensePlate String
  car             Car    @relation(fields: [carlicensePlate], references: [licensePlate], onDelete: Cascade)
  isBooked        Boolean
}

model Booking {
  id        String   @id @default(cuid())
  status    String
  tripId    String
  userId    String
  trip      Trip     @relation(fields: [tripId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Feedback {
  id     String  @id
  rating String
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}
